{"version":3,"sources":["main.js"],"names":["$siteList","$","$lastLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","console","log","stopPropagation","splice","prompt","indexOf","push","toUpperCase","onbeforeunload","string","stringify","setItem","document","key","i","length","toLowerCase"],"mappings":"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","file":"main.882fc4d1.js","sourceRoot":"..\\src","sourcesContent":["const $siteList = $(\".siteList\"); //这个放最上面 要访问到下面的变量\r\n  \r\nconst $lastLi = $siteList.find(\"li.last\"); //找到最后一个li 然后把新增网页放在最后一个的前面  lastli也要放上面 因为下面这个会用到\r\n\r\n//window.hashMap={}   //不能变成全局变量 ，变成全局变量要用window //parcel会自动在代码外面加作用域，所以不需要我们操心，直接写就好了\r\n\r\n\r\n\r\n// 现在hashmap的初始值就是xObject了， 就是从local Storage里读出来的 然后再把字符串再变成对象，但是又不能直接等于 ，因为考虑到第一次用的时候是空的，所以做一个 或 判断：如果xObject存在就用，如果不存在就用预先写好的默认数组\r\nconst x = localStorage.getItem('x')\r\nconst xObject = JSON.parse(x) //JSON parse如果发现x为null 也会返回一个null 不会报错\r\n\r\n//hashmap初始化\r\nconst hashMap= xObject || [\r\n    {logo:'M', url:'https://my.usc.edu/'},\r\n    {logo:'G', url:'https://github.com/'}]\r\n//不需要预先把网站信息写在这里， 可以利用hashmap遍历一下,接收一个节点，生成创建一个Li, 生成了一个li 然后把li放到ul里面去\r\n//如果新增网站，那就给hashmap新增一项 然后重新渲染hashmap就可以啦，在退出的时候把hashmap保存起来\r\n\r\n//由于hash foreach这个函数用到两次 ，那就给它起个名字 渲染 以后调用就行了，简化代码  声明一个render\r\n\r\n\r\n//现在完成一个小需求：就是让首字母是网站的首字母 而不是http的h 或者www的w  这样操作后 url原本的字符串是不变的 只是产生新的字符串. 还有一点，要考虑到万一用户复制了很长一串的url ，要把/后面的一长串给删掉\r\n//简化LOGO\r\n const simplifyUrl = (url) =>{\r\n  return url.replace('http://','')\r\n      .replace('https://','')\r\n      .replace('www.','')\r\n      .replace(/\\/.*/, '')\r\n     // 此处需要用到正则表达式，要用的时候上网搜就好了，写篇博客以后不用管他就ok\r\n}\r\n\r\nconst render = () =>{\r\n\r\n  $siteList.find('li:not(.last)').remove()  //找到除最后一个的所有li 然后删掉,在进行渲染之前先要进行删除这一步\r\n\r\n  hashMap.forEach((node,index)=>{\r\n      //console.log(index);\r\n      const $li = $(`<li>\r\n    \r\n              <div class=\"site\">\r\n                <div class=\"logo\">${node.logo}</div>\r\n                <div class=\"link\"> ${simplifyUrl(node.url)} </div>\r\n                <div class=\"close\"> \r\n                <svg class=\"icon\" >\r\n    <use xlink:href=\"#icon-close\"></use>\r\n</svg></div>\r\n              </div>\r\n            </li>`).insertBefore($lastLi);\r\n//现在的问题是点击close按钮 ，它还是处于li上的，点它等同于点了li，现在需要完成  在点击close的时候 不让出现点击site 的情况 ，也就是阻止冒泡。 但是即使这样做了之后发现还是会跳转就，把a标签删了 不要了，用JS实现 用li.onclick代替a标签的作用，因为如果不这样代替的话就无法阻止冒泡，关闭按钮就没用了\r\n      $li.on('click',()=>{\r\n          window.open(node.url)//跳转到一个地方 打开一个新窗口\r\n      })\r\n\r\n      //监听close  e是事件\r\n      $li.on('click', '.close',(e)=>{\r\n          console.log(\"鼠标点了关闭按钮\")\r\n          e.stopPropagation()\r\n          console.log(hashMap);//webstorm独有的功能，变量后面 打.log按Tab 就出来了~\r\n          //从hashmap里找到当前点的网站然后给删掉\r\n          hashMap.splice(index,1) //splice用法 从index删多少个，删完之后记得重新渲染一下hashmap\r\n          render()\r\n      })\r\n  }) }\r\n  \r\nrender();\r\n\r\n// console.log($)\r\n// 从boot cdn 输入jQuery复制script 粘贴到 main.js之前 ，然后想测试一下是否导入成功 ， 就在这里输入一下console.log($) 看网页的控制台有没有就好了~\r\n\r\n//现在要用jQuery 监听点击新增网站的Button事件 ，console log调试大法，每做完一步想测试的时候就console.log一下看这一步有没有问题\r\n\r\n$(\".addButton\").on(\"click\", () => {\r\n  // console.log(1)   //有1说明监听成功了\r\n  let url = window.prompt(\"请输入您要添加的网址\");\r\n\r\n  //现在需要点开后弹窗询问用户添加什么网址\r\n  if (url.indexOf(\"http\") !== 0) {\r\n    //第一个字符如果不是https就提示一下，就默认给它加个https,所以要把const改成let，因为const改不了\r\n    url = \"https://\" + url;\r\n  }\r\n  console.log(url); //现在要得到用户输入的东西 依旧log调试\r\n\r\n  //现在要把新增网站的第一个字母放到里面去，新增一个div插进去，位置是在“新增网站”的前面\r\n  console.log($siteList)\r\n\r\n  hashMap.push({\r\n    logo: simplifyUrl(url)[0].toUpperCase(),//注意这个逗号！！！ 搞半天 这是哈希表 里面用逗号隔开！！！\r\n    url: url\r\n  })\r\n  //现在思路变了，当点击的时候不再创建Li了 而是在hashmap里添加一项，这个做完之后干嘛？ 就重新把hashmap 渲染一下（如下重新做一遍for each的步骤），但这个时候发现又多加了一个usc 和github, 所以要把之前的usc github删掉， 怎么删呢\r\n\r\n  render()\r\n\r\n})\r\n\r\n  //    console.log($siteList) 现在找到sitelist 然后打出来,打出来的是jquery的API  //多行字符串 用反引号 ， 下面这个const $li就是 新增的Li  ，去jq 中文文档看， 搜insert 找到insertBefore  \r\n\r\n//   const $li = $(`<li>    \r\n// <a href=\"${url}\"\r\n//             ><div class=\"site\">\r\n//               <div class=\"logo\">${url[0]}</div>\r\n//               <div class=\"link\">${url}</div>\r\n//             </div></a\r\n//           >\r\n// </li>`).insertBefore($lastLi);\r\n// });\r\n\r\n\r\n//现在用手机测一下 这个地方搞了半天  首先要让电脑和手机处于同一个wifi下 然后在手机的浏览器里输入ip+端口号(一定要加端口号 不然默认找8080端口就打不开了！！！)格式是：192.168.31.127:1234 最好用chrome打开 百度浏览器有些问题\r\n//tips :为什么取名有讲究 叫global header 而不是header 因为要考虑到万一工作时候碰见了猪队友 ，写的代码很烂 乱加header  就会污染CSS, 所以就起这种比较特殊的名字 防止他们和我重名\r\n// 现在要解决的是新增网站后，退出来后网站就不见了， 因为没有存起来， 怎么办呢？---用哈希表组成的数组给他存起来 \r\n\r\n//现在监听用户要关闭页面时的操作，在关闭页面的时候就把哈希函数存起来\r\nwindow.onbeforeunload = ()=>{\r\n  console.log('页面关闭了')\r\n  \r\n  const string = JSON. stringify(hashMap)\r\n//local storage只能存字符串 不能存对象 所以现在我们用stringify把哈希对象变成字符串\r\nconsole.log(hashMap)\r\nconsole.log(typeof hashMap)\r\nconsole.log(typeof string)\r\nconsole.log(string)\r\n\r\n//现在把字符串存到全局变量local storage里面 window.可省略 他接受两个值，key和value\r\nlocalStorage.setItem('x',string)\r\n}\r\n\r\n//键盘导航，  监听键盘事件 ，监听document （经验之谈）\r\n//document.addEventListener()\r\n//或者用jq包装一下\r\n$(document).on('keypress',(e)=>{\r\n    console.log(e .key);//webstorm提示keycode不要用 那就用key吧~\r\n    //const key= e.key\r\n    //如果变量名和属性名一样就可以简写如下\r\n    const{key}=e\r\n    console.log(key);\r\n    //现在要找到用户按的那个键然后打开对应的网址\r\n    for(let i = 0;i <hashMap.length; i++){\r\n        if(hashMap[i].logo.toLowerCase()===key){\r\n            window.open(hashMap[i].url)\r\n        }\r\n    }\r\n})\r\n\r\n"]}